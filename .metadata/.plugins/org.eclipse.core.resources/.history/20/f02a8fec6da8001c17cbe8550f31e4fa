#include "Flights.h"

eFlight* newFlight()
{
	return (eFlight*) calloc(1 , sizeof(eFlight));
}

eFlight* newFlight_Parameters(char* flightId , char* planeId, char* pilotId, char* date, char* destiny, char* passengers, char* depertyTime, char* arriveTime)
{
	eFlight* flightAux;
	int auxFlightId;
	int auxPlaneId;
	int auxPilotId;
	char auxDate[TAMFECHA];
	char auxDestiny[TAMDESTINO];
	int auxPassengersCount;
	int auxDepertyTime;
	int auxArriveTime;

	flightAux = NULL;
	if(flightId != NULL && planeId != NULL && pilotId != NULL && date != NULL && destiny != NULL && passengers != NULL && depertyTime != NULL && arriveTime != NULL)
	{
		flightAux = newFlight();

		if(flightAux != NULL) //osea si encontro lugar en memoria dinamica, asigno...
		{
			//conversiones
			auxFlightId = atoi(flightId);
			//printf("EL ID ES:%d\n",auxFlightId);
			auxPlaneId = atoi(planeId);
			auxPilotId = atoi(pilotId);
			strncpy(auxDate , date , sizeof(auxDate));
			strncpy(auxDestiny , destiny , sizeof(auxDestiny));
			auxPassengersCount = atoi(passengers);
			auxDepertyTime = atoi(depertyTime);
			auxArriveTime = atoi(arriveTime);

			//setters
			setFlightId(flightAux, auxFlightId);
			setPlaneId(flightAux, auxPlaneId);
			setPilotIdFromFlight(flightAux, auxPilotId);
			setFlightDate(flightAux, auxDate);
			setFlightDestiny(flightAux, auxDestiny);
			setPassengersCount(flightAux, auxPassengersCount);
			setDepartyTime(flightAux, auxDepertyTime);
			setArriveTime(flightAux, auxArriveTime);
		}
	}

	return flightAux;
}

//--------------------GETTERS

int getFlightId(eFlight* this , int* flightId)
{
	int ret;

	ret = -1;
	if(this != NULL && flightId != NULL)
	{
		*flightId = this->flightId;
		ret = 0;
	}

	return ret;
}

int getPlaneId(eFlight* this , int* planeId)
{
	int ret;

	ret = -1;
	if(this != NULL && planeId != NULL)
	{
		*planeId = this->planeId;
		ret = 0;
	}

	return ret;
}

int getPilotIdFromFlight(eFlight* this , int* pilotId)
{
	int ret;

	ret = -1;
	if(this != NULL && pilotId != NULL)
	{
		*pilotId = this->pilotId;
		ret = 0;
	}

	return ret;
}

int getFlightDate(eFlight* this , char* date)
{
	int ret;

	ret = -1;
	if(this != NULL && date != NULL)
	{
		strcpy(date , this->flightDate);
		ret = 0;
	}

	return ret;
}

int getFlightDestiny(eFlight* this , char* dastiny)
{
	int ret;

	ret = -1;
	if(this != NULL && dastiny != NULL)
	{
		strcpy(dastiny , this->flightDestiny);
		ret = 0;
	}

	return ret;
}

int getPassengersCount(eFlight* this , int* passengers)
{
	int ret;

	ret = -1;
	if(this != NULL && passengers != NULL)
	{
		*passengers = this->passengerCount;
		ret = 0;
	}

	return ret;
}

int getDepertyTime(eFlight* this , int* depertyTime)
{
	int ret;

	ret = -1;
	if(this != NULL && depertyTime != NULL)
	{
		*depertyTime = this->despityTime;
		ret = 0;
	}

	return ret;
}

int getArriveTime(eFlight* this , int* arriveTime)
{
	int ret;

	ret = -1;
	if(this != NULL && arriveTime != NULL)
	{
		*arriveTime = this->arriveTime;
		ret = 0;
	}

	return ret;
}

//--------------------------SETTERS

int setFlightId(eFlight* this , int flightId)
{
	int ret;

	ret = -1;

	if(this != NULL)
	{
		this->flightId = flightId;
		ret = 0;
	}

	return ret;
}

int setPlaneId(eFlight* this , int planeId)
{
	int ret;

	ret = -1;

	if(this != NULL)
	{
		this->planeId = planeId;
		ret = 0;
	}

	return ret;
}

int setPilotIdFromFlight(eFlight* this , int pilotId)
{
	int ret;

	ret = -1;

	if(this != NULL)
	{
		this->pilotId = pilotId;
		ret = 0;
	}

	return ret;
}

int setFlightDate(eFlight* this , char* date)
{
	int ret;

	ret = -1;

	if(this != NULL && date != NULL)
	{
		strcpy(this->flightDate , date);
		ret = 0;
	}

	return ret;
}

int setFlightDestiny(eFlight* this , char* destiny)
{
	int ret;

	ret = -1;

	if(this != NULL && destiny != NULL)
	{
		strcpy(this->flightDestiny , destiny);
		ret = 0;
	}

	return ret;
}

int setPassengersCount(eFlight* this , int passengers)
{
	int ret;

	ret = -1;

	if(this != NULL)
	{
		this->passengerCount = passengers;
		ret = 0;
	}

	return ret;
}

int setDepartyTime(eFlight* this , int deperty)
{
	int ret;

	ret = -1;

	if(this != NULL)
	{
		this->despityTime = deperty;
		ret = 0;
	}

	return ret;
}

int setArriveTime(eFlight* this , int arrive)
{
	int ret;

	ret = -1;

	if(this != NULL)
	{
		this->arriveTime = arrive;
		ret = 0;
	}

	return ret;
}

int countPassengersOrChinaPassengers(LinkedList* pArrayFlightList , int election)
{
	int ret;
	int acum;
	eFlight* pFlight;
	int passengersAux;

	//---
	char destinyAux[TAMDESTINO];

	acum = 0;
	ret = -1;

	if(pArrayFlightList != NULL && (election > -1 && election < 2) )
	{
		for(int i=0 ; i<ll_len(pArrayFlightList) ; i++)
		{
			pFlight = ll_get(pArrayFlightList, i);
			getPassengersCount(pFlight, &passengersAux);

			if(election == 0)
			{
				acum += passengersAux;
			}
			else
			{
				getFlightDestiny(pFlight, destinyAux);
				if(strcmp(destinyAux , "China") == 0)
				{
					acum += passengersAux;
				}
			}
		}
		ret = acum;
	}

	return ret;
}

int filtShortFlights(void* pVoidElement)
{
	int ret;
	eFlight* auxFlight;
	int arriveTime;
	int depertyTime;

	ret = 0; //no guarda...
	if(pVoidElement != NULL)
	{
		auxFlight = (eFlight*) pVoidElement;
		if(auxFlight != NULL)
		{
			getArriveTime(auxFlight, &arriveTime);
			getDepertyTime(auxFlight, &depertyTime);

			if( (arriveTime - depertyTime) < 3)
			{
				ret = 1;
			}
		}
	}
	return ret;
}

int filtChinaFlights(void* pVoidElement)
{
	int ret;
	eFlight* auxFlight;
	char destiny[TAMDESTINO];

	ret = 0;
	if(pVoidElement != NULL)
	{
		auxFlight = (eFlight*) pVoidElement;
		if(auxFlight != NULL)
		{
			getFlightDestiny(auxFlight, destiny);
			if(strcmp(destiny , "China") == 0)
			{
				ret = 1;
			}
		}
	}
	return ret;
}

int filtExcludeAlexLifeson(void* pVoidElement)
{
	int ret;
	eFlight* auxFlight;
	int idPilot;


	ret = 0;
	if(pVoidElement != NULL)
	{
		auxFlight = (eFlight*) pVoidElement;
		if(auxFlight != NULL)
		{
			getPilotIdFromFlight(auxFlight, &idPilot);
			if(idPilot != 1)
			{
				ret = 1;
			}
		}
	}
	return ret;
}

int sortListByFlightId(void* pElement , void* pElement2)
{
	int ret;
	eFlight* element1;
	eFlight* element2;
	int flightIdEelement1;
	int flightIdEelement2;

	element1 = (eFlight*) pElement;
	element2 = (eFlight*) pElement2;

	ret = 0; //si algo falla no ordeno ninguno.. y si son iguales los dejo asi..
	if(element1 != NULL && element2 != NULL)
	{
		getFlightId(element1, &flightIdEelement1);
		getFlightId(element2, &flightIdEelement2);
	}
}
